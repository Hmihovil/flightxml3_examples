//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace console_app.flightxml.flightaware.com {
    using System.Xml.Serialization;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FlightXML3Soap", Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class FlightXML3 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AircraftTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AirlineFlightSchedulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AirlineInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AirportBoardsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AirportDelaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback AirportInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlockIdentCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountAirportOperationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountAllEnrouteAirlineOperationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecodeFlightRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecodeRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindFlightOperationCompleted;
        
        private System.Threading.SendOrPostCallback FleetBoardsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FlightCancellationStatisticsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FlightInfoStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlightTrackOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLongsToDistanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback LatLongsToHeadingOperationCompleted;
        
        private System.Threading.SendOrPostCallback NearbyAirportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RoutesBetweenAirportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TailOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback WeatherConditionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback WeatherForecastOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZipcodeInfoOperationCompleted;
        
        /// CodeRemarks
        public FlightXML3() {
            this.Url = "http://flightxml.flightaware.com/soap/FlightXML3/op";
        }
        
        public FlightXML3(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event AircraftTypeCompletedEventHandler AircraftTypeCompleted;
        
        /// CodeRemarks
        public event AirlineFlightSchedulesCompletedEventHandler AirlineFlightSchedulesCompleted;
        
        /// CodeRemarks
        public event AirlineInfoCompletedEventHandler AirlineInfoCompleted;
        
        /// CodeRemarks
        public event AirportBoardsCompletedEventHandler AirportBoardsCompleted;
        
        /// CodeRemarks
        public event AirportDelaysCompletedEventHandler AirportDelaysCompleted;
        
        /// CodeRemarks
        public event AirportInfoCompletedEventHandler AirportInfoCompleted;
        
        /// CodeRemarks
        public event BlockIdentCheckCompletedEventHandler BlockIdentCheckCompleted;
        
        /// CodeRemarks
        public event CountAirportOperationsCompletedEventHandler CountAirportOperationsCompleted;
        
        /// CodeRemarks
        public event CountAllEnrouteAirlineOperationsCompletedEventHandler CountAllEnrouteAirlineOperationsCompleted;
        
        /// CodeRemarks
        public event DecodeFlightRouteCompletedEventHandler DecodeFlightRouteCompleted;
        
        /// CodeRemarks
        public event DecodeRouteCompletedEventHandler DecodeRouteCompleted;
        
        /// CodeRemarks
        public event FindFlightCompletedEventHandler FindFlightCompleted;
        
        /// CodeRemarks
        public event FleetBoardsCompletedEventHandler FleetBoardsCompleted;
        
        /// CodeRemarks
        public event FlightCancellationStatisticsCompletedEventHandler FlightCancellationStatisticsCompleted;
        
        /// CodeRemarks
        public event FlightInfoStatusCompletedEventHandler FlightInfoStatusCompleted;
        
        /// CodeRemarks
        public event GetFlightTrackCompletedEventHandler GetFlightTrackCompleted;
        
        /// CodeRemarks
        public event LatLongsToDistanceCompletedEventHandler LatLongsToDistanceCompleted;
        
        /// CodeRemarks
        public event LatLongsToHeadingCompletedEventHandler LatLongsToHeadingCompleted;
        
        /// CodeRemarks
        public event NearbyAirportsCompletedEventHandler NearbyAirportsCompleted;
        
        /// CodeRemarks
        public event RoutesBetweenAirportsCompletedEventHandler RoutesBetweenAirportsCompleted;
        
        /// CodeRemarks
        public event TailOwnerCompletedEventHandler TailOwnerCompleted;
        
        /// CodeRemarks
        public event WeatherConditionsCompletedEventHandler WeatherConditionsCompleted;
        
        /// CodeRemarks
        public event WeatherForecastCompletedEventHandler WeatherForecastCompleted;
        
        /// CodeRemarks
        public event ZipcodeInfoCompletedEventHandler ZipcodeInfoCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:AircraftType", RequestElementName="AircraftTypeRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="AircraftTypeResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AircraftTypeStruct AircraftType(string type) {
            object[] results = this.Invoke("AircraftType", new object[] {
                        type});
            return ((AircraftTypeStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void AircraftTypeAsync(string type) {
            this.AircraftTypeAsync(type, null);
        }
        
        /// CodeRemarks
        public void AircraftTypeAsync(string type, object userState) {
            if ((this.AircraftTypeOperationCompleted == null)) {
                this.AircraftTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAircraftTypeOperationCompleted);
            }
            this.InvokeAsync("AircraftType", new object[] {
                        type}, this.AircraftTypeOperationCompleted, userState);
        }
        
        private void OnAircraftTypeOperationCompleted(object arg) {
            if ((this.AircraftTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AircraftTypeCompleted(this, new AircraftTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:AirlineFlightSchedules", RequestElementName="AirlineFlightSchedulesRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="AirlineFlightSchedulesResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ArrayOfAirlineFlightScheduleStruct AirlineFlightSchedules(int start_date, int end_date, string origin, string destination, string airline, string flightno, bool exclude_codeshare, [System.Xml.Serialization.XmlIgnoreAttribute()] bool exclude_codeshareSpecified, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("AirlineFlightSchedules", new object[] {
                        start_date,
                        end_date,
                        origin,
                        destination,
                        airline,
                        flightno,
                        exclude_codeshare,
                        exclude_codeshareSpecified,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((ArrayOfAirlineFlightScheduleStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void AirlineFlightSchedulesAsync(int start_date, int end_date, string origin, string destination, string airline, string flightno, bool exclude_codeshare, bool exclude_codeshareSpecified, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.AirlineFlightSchedulesAsync(start_date, end_date, origin, destination, airline, flightno, exclude_codeshare, exclude_codeshareSpecified, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void AirlineFlightSchedulesAsync(int start_date, int end_date, string origin, string destination, string airline, string flightno, bool exclude_codeshare, bool exclude_codeshareSpecified, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.AirlineFlightSchedulesOperationCompleted == null)) {
                this.AirlineFlightSchedulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirlineFlightSchedulesOperationCompleted);
            }
            this.InvokeAsync("AirlineFlightSchedules", new object[] {
                        start_date,
                        end_date,
                        origin,
                        destination,
                        airline,
                        flightno,
                        exclude_codeshare,
                        exclude_codeshareSpecified,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.AirlineFlightSchedulesOperationCompleted, userState);
        }
        
        private void OnAirlineFlightSchedulesOperationCompleted(object arg) {
            if ((this.AirlineFlightSchedulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AirlineFlightSchedulesCompleted(this, new AirlineFlightSchedulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:AirlineInfo", RequestElementName="AirlineInfoRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="AirlineInfoResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AirlineInfoStruct AirlineInfo(string airline_code) {
            object[] results = this.Invoke("AirlineInfo", new object[] {
                        airline_code});
            return ((AirlineInfoStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void AirlineInfoAsync(string airline_code) {
            this.AirlineInfoAsync(airline_code, null);
        }
        
        /// CodeRemarks
        public void AirlineInfoAsync(string airline_code, object userState) {
            if ((this.AirlineInfoOperationCompleted == null)) {
                this.AirlineInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirlineInfoOperationCompleted);
            }
            this.InvokeAsync("AirlineInfo", new object[] {
                        airline_code}, this.AirlineInfoOperationCompleted, userState);
        }
        
        private void OnAirlineInfoOperationCompleted(object arg) {
            if ((this.AirlineInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AirlineInfoCompleted(this, new AirlineInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:AirportBoards", RequestElementName="AirportBoardsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="AirportBoardsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AirportBoardsStruct AirportBoards(string airport_code, bool include_ex_data, [System.Xml.Serialization.XmlIgnoreAttribute()] bool include_ex_dataSpecified, string filter, string type, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("AirportBoards", new object[] {
                        airport_code,
                        include_ex_data,
                        include_ex_dataSpecified,
                        filter,
                        type,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((AirportBoardsStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void AirportBoardsAsync(string airport_code, bool include_ex_data, bool include_ex_dataSpecified, string filter, string type, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.AirportBoardsAsync(airport_code, include_ex_data, include_ex_dataSpecified, filter, type, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void AirportBoardsAsync(string airport_code, bool include_ex_data, bool include_ex_dataSpecified, string filter, string type, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.AirportBoardsOperationCompleted == null)) {
                this.AirportBoardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirportBoardsOperationCompleted);
            }
            this.InvokeAsync("AirportBoards", new object[] {
                        airport_code,
                        include_ex_data,
                        include_ex_dataSpecified,
                        filter,
                        type,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.AirportBoardsOperationCompleted, userState);
        }
        
        private void OnAirportBoardsOperationCompleted(object arg) {
            if ((this.AirportBoardsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AirportBoardsCompleted(this, new AirportBoardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:AirportDelays", RequestElementName="AirportDelaysRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="AirportDelaysResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AirportDelayStruct AirportDelays(string airport_code, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("AirportDelays", new object[] {
                        airport_code,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((AirportDelayStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void AirportDelaysAsync(string airport_code, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.AirportDelaysAsync(airport_code, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void AirportDelaysAsync(string airport_code, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.AirportDelaysOperationCompleted == null)) {
                this.AirportDelaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirportDelaysOperationCompleted);
            }
            this.InvokeAsync("AirportDelays", new object[] {
                        airport_code,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.AirportDelaysOperationCompleted, userState);
        }
        
        private void OnAirportDelaysOperationCompleted(object arg) {
            if ((this.AirportDelaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AirportDelaysCompleted(this, new AirportDelaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:AirportInfo", RequestElementName="AirportInfoRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="AirportInfoResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AirportStruct AirportInfo(string airport_code) {
            object[] results = this.Invoke("AirportInfo", new object[] {
                        airport_code});
            return ((AirportStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void AirportInfoAsync(string airport_code) {
            this.AirportInfoAsync(airport_code, null);
        }
        
        /// CodeRemarks
        public void AirportInfoAsync(string airport_code, object userState) {
            if ((this.AirportInfoOperationCompleted == null)) {
                this.AirportInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirportInfoOperationCompleted);
            }
            this.InvokeAsync("AirportInfo", new object[] {
                        airport_code}, this.AirportInfoOperationCompleted, userState);
        }
        
        private void OnAirportInfoOperationCompleted(object arg) {
            if ((this.AirportInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AirportInfoCompleted(this, new AirportInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:BlockIdentCheck", RequestElementName="BlockIdentCheckRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="BlockIdentCheckResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int BlockIdentCheck(string ident) {
            object[] results = this.Invoke("BlockIdentCheck", new object[] {
                        ident});
            return ((int)(results[0]));
        }
        
        /// CodeRemarks
        public void BlockIdentCheckAsync(string ident) {
            this.BlockIdentCheckAsync(ident, null);
        }
        
        /// CodeRemarks
        public void BlockIdentCheckAsync(string ident, object userState) {
            if ((this.BlockIdentCheckOperationCompleted == null)) {
                this.BlockIdentCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockIdentCheckOperationCompleted);
            }
            this.InvokeAsync("BlockIdentCheck", new object[] {
                        ident}, this.BlockIdentCheckOperationCompleted, userState);
        }
        
        private void OnBlockIdentCheckOperationCompleted(object arg) {
            if ((this.BlockIdentCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlockIdentCheckCompleted(this, new BlockIdentCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:CountAirportOperations", RequestElementName="CountAirportOperationsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="CountAirportOperationsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountAirportOperationsStruct CountAirportOperations(string airport_code) {
            object[] results = this.Invoke("CountAirportOperations", new object[] {
                        airport_code});
            return ((CountAirportOperationsStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void CountAirportOperationsAsync(string airport_code) {
            this.CountAirportOperationsAsync(airport_code, null);
        }
        
        /// CodeRemarks
        public void CountAirportOperationsAsync(string airport_code, object userState) {
            if ((this.CountAirportOperationsOperationCompleted == null)) {
                this.CountAirportOperationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountAirportOperationsOperationCompleted);
            }
            this.InvokeAsync("CountAirportOperations", new object[] {
                        airport_code}, this.CountAirportOperationsOperationCompleted, userState);
        }
        
        private void OnCountAirportOperationsOperationCompleted(object arg) {
            if ((this.CountAirportOperationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountAirportOperationsCompleted(this, new CountAirportOperationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:CountAllEnrouteAirlineOperations", RequestElementName="CountAllEnrouteAirlineOperationsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="CountAllEnrouteAirlineOperationsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("data", IsNullable=false)]
        public CountAirlineOperationsStruct[] CountAllEnrouteAirlineOperations() {
            object[] results = this.Invoke("CountAllEnrouteAirlineOperations", new object[0]);
            return ((CountAirlineOperationsStruct[])(results[0]));
        }
        
        /// CodeRemarks
        public void CountAllEnrouteAirlineOperationsAsync() {
            this.CountAllEnrouteAirlineOperationsAsync(null);
        }
        
        /// CodeRemarks
        public void CountAllEnrouteAirlineOperationsAsync(object userState) {
            if ((this.CountAllEnrouteAirlineOperationsOperationCompleted == null)) {
                this.CountAllEnrouteAirlineOperationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountAllEnrouteAirlineOperationsOperationCompleted);
            }
            this.InvokeAsync("CountAllEnrouteAirlineOperations", new object[0], this.CountAllEnrouteAirlineOperationsOperationCompleted, userState);
        }
        
        private void OnCountAllEnrouteAirlineOperationsOperationCompleted(object arg) {
            if ((this.CountAllEnrouteAirlineOperationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountAllEnrouteAirlineOperationsCompleted(this, new CountAllEnrouteAirlineOperationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:DecodeFlightRoute", RequestElementName="DecodeFlightRouteRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="DecodeFlightRouteResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ArrayOfFlightRouteStruct DecodeFlightRoute(string faFlightID) {
            object[] results = this.Invoke("DecodeFlightRoute", new object[] {
                        faFlightID});
            return ((ArrayOfFlightRouteStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void DecodeFlightRouteAsync(string faFlightID) {
            this.DecodeFlightRouteAsync(faFlightID, null);
        }
        
        /// CodeRemarks
        public void DecodeFlightRouteAsync(string faFlightID, object userState) {
            if ((this.DecodeFlightRouteOperationCompleted == null)) {
                this.DecodeFlightRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecodeFlightRouteOperationCompleted);
            }
            this.InvokeAsync("DecodeFlightRoute", new object[] {
                        faFlightID}, this.DecodeFlightRouteOperationCompleted, userState);
        }
        
        private void OnDecodeFlightRouteOperationCompleted(object arg) {
            if ((this.DecodeFlightRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecodeFlightRouteCompleted(this, new DecodeFlightRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:DecodeRoute", RequestElementName="DecodeRouteRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="DecodeRouteResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ArrayOfFlightRouteStruct DecodeRoute(string origin, string route, string destination) {
            object[] results = this.Invoke("DecodeRoute", new object[] {
                        origin,
                        route,
                        destination});
            return ((ArrayOfFlightRouteStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void DecodeRouteAsync(string origin, string route, string destination) {
            this.DecodeRouteAsync(origin, route, destination, null);
        }
        
        /// CodeRemarks
        public void DecodeRouteAsync(string origin, string route, string destination, object userState) {
            if ((this.DecodeRouteOperationCompleted == null)) {
                this.DecodeRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecodeRouteOperationCompleted);
            }
            this.InvokeAsync("DecodeRoute", new object[] {
                        origin,
                        route,
                        destination}, this.DecodeRouteOperationCompleted, userState);
        }
        
        private void OnDecodeRouteOperationCompleted(object arg) {
            if ((this.DecodeRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecodeRouteCompleted(this, new DecodeRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:FindFlight", RequestElementName="FindFlightRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="FindFlightResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindFlightStruct FindFlight(string origin, string destination, bool include_ex_data, [System.Xml.Serialization.XmlIgnoreAttribute()] bool include_ex_dataSpecified, string type, string filter, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("FindFlight", new object[] {
                        origin,
                        destination,
                        include_ex_data,
                        include_ex_dataSpecified,
                        type,
                        filter,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((FindFlightStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void FindFlightAsync(string origin, string destination, bool include_ex_data, bool include_ex_dataSpecified, string type, string filter, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.FindFlightAsync(origin, destination, include_ex_data, include_ex_dataSpecified, type, filter, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void FindFlightAsync(string origin, string destination, bool include_ex_data, bool include_ex_dataSpecified, string type, string filter, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.FindFlightOperationCompleted == null)) {
                this.FindFlightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindFlightOperationCompleted);
            }
            this.InvokeAsync("FindFlight", new object[] {
                        origin,
                        destination,
                        include_ex_data,
                        include_ex_dataSpecified,
                        type,
                        filter,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.FindFlightOperationCompleted, userState);
        }
        
        private void OnFindFlightOperationCompleted(object arg) {
            if ((this.FindFlightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindFlightCompleted(this, new FindFlightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:FleetBoards", RequestElementName="FleetBoardsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="FleetBoardsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FleetBoardsStruct FleetBoards(string fleet_code, bool include_ex_data, [System.Xml.Serialization.XmlIgnoreAttribute()] bool include_ex_dataSpecified, string type, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("FleetBoards", new object[] {
                        fleet_code,
                        include_ex_data,
                        include_ex_dataSpecified,
                        type,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((FleetBoardsStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void FleetBoardsAsync(string fleet_code, bool include_ex_data, bool include_ex_dataSpecified, string type, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.FleetBoardsAsync(fleet_code, include_ex_data, include_ex_dataSpecified, type, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void FleetBoardsAsync(string fleet_code, bool include_ex_data, bool include_ex_dataSpecified, string type, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.FleetBoardsOperationCompleted == null)) {
                this.FleetBoardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFleetBoardsOperationCompleted);
            }
            this.InvokeAsync("FleetBoards", new object[] {
                        fleet_code,
                        include_ex_data,
                        include_ex_dataSpecified,
                        type,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.FleetBoardsOperationCompleted, userState);
        }
        
        private void OnFleetBoardsOperationCompleted(object arg) {
            if ((this.FleetBoardsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FleetBoardsCompleted(this, new FleetBoardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:FlightCancellationStatistics", RequestElementName="FlightCancellationStatisticsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="FlightCancellationStatisticsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CancellationSummaryStruct FlightCancellationStatistics(string time_period, string type_matching, string ident_filter, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("FlightCancellationStatistics", new object[] {
                        time_period,
                        type_matching,
                        ident_filter,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((CancellationSummaryStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void FlightCancellationStatisticsAsync(string time_period, string type_matching, string ident_filter, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.FlightCancellationStatisticsAsync(time_period, type_matching, ident_filter, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void FlightCancellationStatisticsAsync(string time_period, string type_matching, string ident_filter, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.FlightCancellationStatisticsOperationCompleted == null)) {
                this.FlightCancellationStatisticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightCancellationStatisticsOperationCompleted);
            }
            this.InvokeAsync("FlightCancellationStatistics", new object[] {
                        time_period,
                        type_matching,
                        ident_filter,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.FlightCancellationStatisticsOperationCompleted, userState);
        }
        
        private void OnFlightCancellationStatisticsOperationCompleted(object arg) {
            if ((this.FlightCancellationStatisticsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlightCancellationStatisticsCompleted(this, new FlightCancellationStatisticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:FlightInfoStatus", RequestElementName="FlightInfoStatusRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="FlightInfoStatusResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ArrayOfFlightInfoStatusStruct FlightInfoStatus(string ident, bool include_ex_data, [System.Xml.Serialization.XmlIgnoreAttribute()] bool include_ex_dataSpecified, string filter, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("FlightInfoStatus", new object[] {
                        ident,
                        include_ex_data,
                        include_ex_dataSpecified,
                        filter,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((ArrayOfFlightInfoStatusStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void FlightInfoStatusAsync(string ident, bool include_ex_data, bool include_ex_dataSpecified, string filter, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.FlightInfoStatusAsync(ident, include_ex_data, include_ex_dataSpecified, filter, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void FlightInfoStatusAsync(string ident, bool include_ex_data, bool include_ex_dataSpecified, string filter, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.FlightInfoStatusOperationCompleted == null)) {
                this.FlightInfoStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightInfoStatusOperationCompleted);
            }
            this.InvokeAsync("FlightInfoStatus", new object[] {
                        ident,
                        include_ex_data,
                        include_ex_dataSpecified,
                        filter,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.FlightInfoStatusOperationCompleted, userState);
        }
        
        private void OnFlightInfoStatusOperationCompleted(object arg) {
            if ((this.FlightInfoStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlightInfoStatusCompleted(this, new FlightInfoStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:GetFlightTrack", RequestElementName="GetFlightTrackRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="GetFlightTrackResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("tracks", IsNullable=false)]
        public TrackStruct[] GetFlightTrack(string ident, bool include_position_estimates, [System.Xml.Serialization.XmlIgnoreAttribute()] bool include_position_estimatesSpecified) {
            object[] results = this.Invoke("GetFlightTrack", new object[] {
                        ident,
                        include_position_estimates,
                        include_position_estimatesSpecified});
            return ((TrackStruct[])(results[0]));
        }
        
        /// CodeRemarks
        public void GetFlightTrackAsync(string ident, bool include_position_estimates, bool include_position_estimatesSpecified) {
            this.GetFlightTrackAsync(ident, include_position_estimates, include_position_estimatesSpecified, null);
        }
        
        /// CodeRemarks
        public void GetFlightTrackAsync(string ident, bool include_position_estimates, bool include_position_estimatesSpecified, object userState) {
            if ((this.GetFlightTrackOperationCompleted == null)) {
                this.GetFlightTrackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlightTrackOperationCompleted);
            }
            this.InvokeAsync("GetFlightTrack", new object[] {
                        ident,
                        include_position_estimates,
                        include_position_estimatesSpecified}, this.GetFlightTrackOperationCompleted, userState);
        }
        
        private void OnGetFlightTrackOperationCompleted(object arg) {
            if ((this.GetFlightTrackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlightTrackCompleted(this, new GetFlightTrackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:LatLongsToDistance", RequestElementName="LatLongsToDistanceRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="LatLongsToDistanceResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LatLongsToDistance(float lat1, float lon1, float lat2, float lon2) {
            object[] results = this.Invoke("LatLongsToDistance", new object[] {
                        lat1,
                        lon1,
                        lat2,
                        lon2});
            return ((int)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLongsToDistanceAsync(float lat1, float lon1, float lat2, float lon2) {
            this.LatLongsToDistanceAsync(lat1, lon1, lat2, lon2, null);
        }
        
        /// CodeRemarks
        public void LatLongsToDistanceAsync(float lat1, float lon1, float lat2, float lon2, object userState) {
            if ((this.LatLongsToDistanceOperationCompleted == null)) {
                this.LatLongsToDistanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLongsToDistanceOperationCompleted);
            }
            this.InvokeAsync("LatLongsToDistance", new object[] {
                        lat1,
                        lon1,
                        lat2,
                        lon2}, this.LatLongsToDistanceOperationCompleted, userState);
        }
        
        private void OnLatLongsToDistanceOperationCompleted(object arg) {
            if ((this.LatLongsToDistanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLongsToDistanceCompleted(this, new LatLongsToDistanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:LatLongsToHeading", RequestElementName="LatLongsToHeadingRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="LatLongsToHeadingResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LatLongsToHeading(float lat1, float lon1, float lat2, float lon2) {
            object[] results = this.Invoke("LatLongsToHeading", new object[] {
                        lat1,
                        lon1,
                        lat2,
                        lon2});
            return ((int)(results[0]));
        }
        
        /// CodeRemarks
        public void LatLongsToHeadingAsync(float lat1, float lon1, float lat2, float lon2) {
            this.LatLongsToHeadingAsync(lat1, lon1, lat2, lon2, null);
        }
        
        /// CodeRemarks
        public void LatLongsToHeadingAsync(float lat1, float lon1, float lat2, float lon2, object userState) {
            if ((this.LatLongsToHeadingOperationCompleted == null)) {
                this.LatLongsToHeadingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLongsToHeadingOperationCompleted);
            }
            this.InvokeAsync("LatLongsToHeading", new object[] {
                        lat1,
                        lon1,
                        lat2,
                        lon2}, this.LatLongsToHeadingOperationCompleted, userState);
        }
        
        private void OnLatLongsToHeadingOperationCompleted(object arg) {
            if ((this.LatLongsToHeadingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LatLongsToHeadingCompleted(this, new LatLongsToHeadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:NearbyAirports", RequestElementName="NearbyAirportsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="NearbyAirportsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NearbyAirportsStruct NearbyAirports(float latitude, [System.Xml.Serialization.XmlIgnoreAttribute()] bool latitudeSpecified, float longitude, [System.Xml.Serialization.XmlIgnoreAttribute()] bool longitudeSpecified, string airport_code, int radius, bool only_iap, [System.Xml.Serialization.XmlIgnoreAttribute()] bool only_iapSpecified, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("NearbyAirports", new object[] {
                        latitude,
                        latitudeSpecified,
                        longitude,
                        longitudeSpecified,
                        airport_code,
                        radius,
                        only_iap,
                        only_iapSpecified,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((NearbyAirportsStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void NearbyAirportsAsync(float latitude, bool latitudeSpecified, float longitude, bool longitudeSpecified, string airport_code, int radius, bool only_iap, bool only_iapSpecified, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.NearbyAirportsAsync(latitude, latitudeSpecified, longitude, longitudeSpecified, airport_code, radius, only_iap, only_iapSpecified, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void NearbyAirportsAsync(float latitude, bool latitudeSpecified, float longitude, bool longitudeSpecified, string airport_code, int radius, bool only_iap, bool only_iapSpecified, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.NearbyAirportsOperationCompleted == null)) {
                this.NearbyAirportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNearbyAirportsOperationCompleted);
            }
            this.InvokeAsync("NearbyAirports", new object[] {
                        latitude,
                        latitudeSpecified,
                        longitude,
                        longitudeSpecified,
                        airport_code,
                        radius,
                        only_iap,
                        only_iapSpecified,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.NearbyAirportsOperationCompleted, userState);
        }
        
        private void OnNearbyAirportsOperationCompleted(object arg) {
            if ((this.NearbyAirportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NearbyAirportsCompleted(this, new NearbyAirportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:RoutesBetweenAirports", RequestElementName="RoutesBetweenAirportsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="RoutesBetweenAirportsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ArrayOfRoutesBetweenAirportsStruct RoutesBetweenAirports(string origin, string destination, string max_file_age, string sort_by, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("RoutesBetweenAirports", new object[] {
                        origin,
                        destination,
                        max_file_age,
                        sort_by,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((ArrayOfRoutesBetweenAirportsStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void RoutesBetweenAirportsAsync(string origin, string destination, string max_file_age, string sort_by, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.RoutesBetweenAirportsAsync(origin, destination, max_file_age, sort_by, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void RoutesBetweenAirportsAsync(string origin, string destination, string max_file_age, string sort_by, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.RoutesBetweenAirportsOperationCompleted == null)) {
                this.RoutesBetweenAirportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRoutesBetweenAirportsOperationCompleted);
            }
            this.InvokeAsync("RoutesBetweenAirports", new object[] {
                        origin,
                        destination,
                        max_file_age,
                        sort_by,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.RoutesBetweenAirportsOperationCompleted, userState);
        }
        
        private void OnRoutesBetweenAirportsOperationCompleted(object arg) {
            if ((this.RoutesBetweenAirportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RoutesBetweenAirportsCompleted(this, new RoutesBetweenAirportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:TailOwner", RequestElementName="TailOwnerRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="TailOwnerResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TailOwnerStruct TailOwner(string ident) {
            object[] results = this.Invoke("TailOwner", new object[] {
                        ident});
            return ((TailOwnerStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void TailOwnerAsync(string ident) {
            this.TailOwnerAsync(ident, null);
        }
        
        /// CodeRemarks
        public void TailOwnerAsync(string ident, object userState) {
            if ((this.TailOwnerOperationCompleted == null)) {
                this.TailOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTailOwnerOperationCompleted);
            }
            this.InvokeAsync("TailOwner", new object[] {
                        ident}, this.TailOwnerOperationCompleted, userState);
        }
        
        private void OnTailOwnerOperationCompleted(object arg) {
            if ((this.TailOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TailOwnerCompleted(this, new TailOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:WeatherConditions", RequestElementName="WeatherConditionsRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="WeatherConditionsResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WeatherConditionsArrayStruct WeatherConditions(string airport_code, int weather_date, [System.Xml.Serialization.XmlIgnoreAttribute()] bool weather_dateSpecified, string temperature_units, bool return_nearby_weather, [System.Xml.Serialization.XmlIgnoreAttribute()] bool return_nearby_weatherSpecified, int howMany, [System.Xml.Serialization.XmlIgnoreAttribute()] bool howManySpecified, int offset, [System.Xml.Serialization.XmlIgnoreAttribute()] bool offsetSpecified) {
            object[] results = this.Invoke("WeatherConditions", new object[] {
                        airport_code,
                        weather_date,
                        weather_dateSpecified,
                        temperature_units,
                        return_nearby_weather,
                        return_nearby_weatherSpecified,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified});
            return ((WeatherConditionsArrayStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void WeatherConditionsAsync(string airport_code, int weather_date, bool weather_dateSpecified, string temperature_units, bool return_nearby_weather, bool return_nearby_weatherSpecified, int howMany, bool howManySpecified, int offset, bool offsetSpecified) {
            this.WeatherConditionsAsync(airport_code, weather_date, weather_dateSpecified, temperature_units, return_nearby_weather, return_nearby_weatherSpecified, howMany, howManySpecified, offset, offsetSpecified, null);
        }
        
        /// CodeRemarks
        public void WeatherConditionsAsync(string airport_code, int weather_date, bool weather_dateSpecified, string temperature_units, bool return_nearby_weather, bool return_nearby_weatherSpecified, int howMany, bool howManySpecified, int offset, bool offsetSpecified, object userState) {
            if ((this.WeatherConditionsOperationCompleted == null)) {
                this.WeatherConditionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWeatherConditionsOperationCompleted);
            }
            this.InvokeAsync("WeatherConditions", new object[] {
                        airport_code,
                        weather_date,
                        weather_dateSpecified,
                        temperature_units,
                        return_nearby_weather,
                        return_nearby_weatherSpecified,
                        howMany,
                        howManySpecified,
                        offset,
                        offsetSpecified}, this.WeatherConditionsOperationCompleted, userState);
        }
        
        private void OnWeatherConditionsOperationCompleted(object arg) {
            if ((this.WeatherConditionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WeatherConditionsCompleted(this, new WeatherConditionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:WeatherForecast", RequestElementName="WeatherForecastRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="WeatherForecastResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WeatherForecastStruct WeatherForecast(string airport_code, int weather_date, [System.Xml.Serialization.XmlIgnoreAttribute()] bool weather_dateSpecified, bool return_nearby_weather, [System.Xml.Serialization.XmlIgnoreAttribute()] bool return_nearby_weatherSpecified) {
            object[] results = this.Invoke("WeatherForecast", new object[] {
                        airport_code,
                        weather_date,
                        weather_dateSpecified,
                        return_nearby_weather,
                        return_nearby_weatherSpecified});
            return ((WeatherForecastStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void WeatherForecastAsync(string airport_code, int weather_date, bool weather_dateSpecified, bool return_nearby_weather, bool return_nearby_weatherSpecified) {
            this.WeatherForecastAsync(airport_code, weather_date, weather_dateSpecified, return_nearby_weather, return_nearby_weatherSpecified, null);
        }
        
        /// CodeRemarks
        public void WeatherForecastAsync(string airport_code, int weather_date, bool weather_dateSpecified, bool return_nearby_weather, bool return_nearby_weatherSpecified, object userState) {
            if ((this.WeatherForecastOperationCompleted == null)) {
                this.WeatherForecastOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWeatherForecastOperationCompleted);
            }
            this.InvokeAsync("WeatherForecast", new object[] {
                        airport_code,
                        weather_date,
                        weather_dateSpecified,
                        return_nearby_weather,
                        return_nearby_weatherSpecified}, this.WeatherForecastOperationCompleted, userState);
        }
        
        private void OnWeatherForecastOperationCompleted(object arg) {
            if ((this.WeatherForecastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WeatherForecastCompleted(this, new WeatherForecastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FlightXML3:ZipcodeInfo", RequestElementName="ZipcodeInfoRequest", RequestNamespace="http://flightxml.flightaware.com/soap/FlightXML3", ResponseElementName="ZipcodeInfoResults", ResponseNamespace="http://flightxml.flightaware.com/soap/FlightXML3", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ZipcodeInfoStruct ZipcodeInfo(string zipcode) {
            object[] results = this.Invoke("ZipcodeInfo", new object[] {
                        zipcode});
            return ((ZipcodeInfoStruct)(results[0]));
        }
        
        /// CodeRemarks
        public void ZipcodeInfoAsync(string zipcode) {
            this.ZipcodeInfoAsync(zipcode, null);
        }
        
        /// CodeRemarks
        public void ZipcodeInfoAsync(string zipcode, object userState) {
            if ((this.ZipcodeInfoOperationCompleted == null)) {
                this.ZipcodeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZipcodeInfoOperationCompleted);
            }
            this.InvokeAsync("ZipcodeInfo", new object[] {
                        zipcode}, this.ZipcodeInfoOperationCompleted, userState);
        }
        
        private void OnZipcodeInfoOperationCompleted(object arg) {
            if ((this.ZipcodeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZipcodeInfoCompleted(this, new ZipcodeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AircraftTypeStruct {
        
        /// <remarks/>
        public string manufacturer;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public int engine_count;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool engine_countSpecified;
        
        /// <remarks/>
        public string engine_type;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ZipcodeInfoStruct {
        
        /// <remarks/>
        public float latitude;
        
        /// <remarks/>
        public float longitude;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public string county;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ForecastCloudsStruct {
        
        /// <remarks/>
        public string symbol;
        
        /// <remarks/>
        public string coverage;
        
        /// <remarks/>
        public string altitude;
        
        /// <remarks/>
        public string special;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ForecastVisibilityStruct {
        
        /// <remarks/>
        public string symbol;
        
        /// <remarks/>
        public string visibility;
        
        /// <remarks/>
        public string units;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ForecastWindshear {
        
        /// <remarks/>
        public string symbol;
        
        /// <remarks/>
        public string height;
        
        /// <remarks/>
        public string direction;
        
        /// <remarks/>
        public string speed;
        
        /// <remarks/>
        public string units;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ForecastWindStruct {
        
        /// <remarks/>
        public string symbol;
        
        /// <remarks/>
        public string direction;
        
        /// <remarks/>
        public int speed;
        
        /// <remarks/>
        public string units;
        
        /// <remarks/>
        public int peak_gusts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool peak_gustsSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ForecastLineStruct {
        
        /// <remarks/>
        public string forecast_line_type;
        
        /// <remarks/>
        public int forecast_line_start;
        
        /// <remarks/>
        public int forecast_line_end;
        
        /// <remarks/>
        public ForecastWindStruct winds;
        
        /// <remarks/>
        public ForecastWindshear windshear;
        
        /// <remarks/>
        public ForecastVisibilityStruct visibility;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("clouds")]
        public ForecastCloudsStruct[] clouds;
        
        /// <remarks/>
        public string turbulence_layers;
        
        /// <remarks/>
        public string icing_layers;
        
        /// <remarks/>
        public string barometric;
        
        /// <remarks/>
        public string significant_weather;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class DecodedForecastStruct {
        
        /// <remarks/>
        public int forecast_start;
        
        /// <remarks/>
        public int forecast_end;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("forecast_lines")]
        public ForecastLineStruct[] forecast_lines;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class WeatherForecastStruct {
        
        /// <remarks/>
        public string airport_code;
        
        /// <remarks/>
        public string timestring;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("raw_forecast")]
        public string[] raw_forecast;
        
        /// <remarks/>
        public DecodedForecastStruct decoded_forecast;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class WeatherConditionsCloudStruct {
        
        /// <remarks/>
        public string symbol;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public int altitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool altitudeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class WeatherConditionsStruct {
        
        /// <remarks/>
        public string airport_code;
        
        /// <remarks/>
        public int time;
        
        /// <remarks/>
        public string cloud_friendly;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("clouds")]
        public WeatherConditionsCloudStruct[] clouds;
        
        /// <remarks/>
        public string conditions;
        
        /// <remarks/>
        public float pressure;
        
        /// <remarks/>
        public string pressure_units;
        
        /// <remarks/>
        public int temp_air;
        
        /// <remarks/>
        public int temp_dewpoint;
        
        /// <remarks/>
        public int temp_relhum;
        
        /// <remarks/>
        public string temp_perceived;
        
        /// <remarks/>
        public float visibility;
        
        /// <remarks/>
        public string visibility_units;
        
        /// <remarks/>
        public string wind_friendly;
        
        /// <remarks/>
        public int wind_direction;
        
        /// <remarks/>
        public int wind_speed;
        
        /// <remarks/>
        public int wind_speed_gust;
        
        /// <remarks/>
        public string wind_units;
        
        /// <remarks/>
        public string raw_data;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class WeatherConditionsArrayStruct {
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("conditions")]
        public WeatherConditionsStruct[] conditions;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class TailOwnerStruct {
        
        /// <remarks/>
        public string owner;
        
        /// <remarks/>
        public string location;
        
        /// <remarks/>
        public string location2;
        
        /// <remarks/>
        public string website;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class RoutesBetweenAirportsStruct {
        
        /// <remarks/>
        public int count;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public int filed_altitude_min;
        
        /// <remarks/>
        public int filed_altitude_max;
        
        /// <remarks/>
        public int last_departuretime;
        
        /// <remarks/>
        public string route_distance;
        
        /// <remarks/>
        public string aircrafttypes;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ArrayOfRoutesBetweenAirportsStruct {
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("data")]
        public RoutesBetweenAirportsStruct[] data;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class NearbyAirportsStruct {
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("airports")]
        public AirportStruct[] airports;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirportStruct {
        
        /// <remarks/>
        public string airport_code;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int distance;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distanceSpecified;
        
        /// <remarks/>
        public float elevation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool elevationSpecified;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string state;
        
        /// <remarks/>
        public int heading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool headingSpecified;
        
        /// <remarks/>
        public string direction;
        
        /// <remarks/>
        public float longitude;
        
        /// <remarks/>
        public float latitude;
        
        /// <remarks/>
        public string timezone;
        
        /// <remarks/>
        public string country_code;
        
        /// <remarks/>
        public string wiki_url;
        
        /// <remarks/>
        public string alternate_ident;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class TrackStruct {
        
        /// <remarks/>
        public int timestamp;
        
        /// <remarks/>
        public float latitude;
        
        /// <remarks/>
        public float longitude;
        
        /// <remarks/>
        public int groundspeed;
        
        /// <remarks/>
        public int altitude;
        
        /// <remarks/>
        public string altitude_status;
        
        /// <remarks/>
        public string update_type;
        
        /// <remarks/>
        public string altitude_change;
        
        /// <remarks/>
        public int altitude_feet;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool altitude_feetSpecified;
        
        /// <remarks/>
        public int heading;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool headingSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ArrayOfFlightInfoStatusStruct {
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("flights")]
        public FlightInfoStatusStruct[] flights;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class FlightInfoStatusStruct {
        
        /// <remarks/>
        public string ident;
        
        /// <remarks/>
        public string atc_ident;
        
        /// <remarks/>
        public string faFlightID;
        
        /// <remarks/>
        public string airline;
        
        /// <remarks/>
        public string airline_iata;
        
        /// <remarks/>
        public string flightnumber;
        
        /// <remarks/>
        public string tailnumber;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public string codeshares;
        
        /// <remarks/>
        public bool blocked;
        
        /// <remarks/>
        public bool diverted;
        
        /// <remarks/>
        public bool cancelled;
        
        /// <remarks/>
        public AirportDisplayStruct origin;
        
        /// <remarks/>
        public AirportDisplayStruct destination;
        
        /// <remarks/>
        public int filed_ete;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool filed_eteSpecified;
        
        /// <remarks/>
        public string route;
        
        /// <remarks/>
        public int filed_altitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool filed_altitudeSpecified;
        
        /// <remarks/>
        public string display_filed_altitude;
        
        /// <remarks/>
        public int filed_airspeed_kts;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool filed_airspeed_ktsSpecified;
        
        /// <remarks/>
        public int filed_airspeed_mach;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool filed_airspeed_machSpecified;
        
        /// <remarks/>
        public int distance_filed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distance_filedSpecified;
        
        /// <remarks/>
        public Timestamp filed_departure_time;
        
        /// <remarks/>
        public Timestamp estimated_departure_time;
        
        /// <remarks/>
        public Timestamp actual_departure_time;
        
        /// <remarks/>
        public int departure_delay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool departure_delaySpecified;
        
        /// <remarks/>
        public Timestamp filed_arrival_time;
        
        /// <remarks/>
        public Timestamp estimated_arrival_time;
        
        /// <remarks/>
        public Timestamp actual_arrival_time;
        
        /// <remarks/>
        public int arrival_delay;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool arrival_delaySpecified;
        
        /// <remarks/>
        public Timestamp filed_blockout_time;
        
        /// <remarks/>
        public Timestamp estimated_blockout_time;
        
        /// <remarks/>
        public Timestamp actual_blockout_time;
        
        /// <remarks/>
        public Timestamp filed_blockin_time;
        
        /// <remarks/>
        public Timestamp estimated_blockin_time;
        
        /// <remarks/>
        public Timestamp actual_blockin_time;
        
        /// <remarks/>
        public string status;
        
        /// <remarks/>
        public int progress_percent;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool progress_percentSpecified;
        
        /// <remarks/>
        public string aircrafttype;
        
        /// <remarks/>
        public string display_aircrafttype;
        
        /// <remarks/>
        public string full_aircrafttype;
        
        /// <remarks/>
        public string terminal_dest;
        
        /// <remarks/>
        public string gate_dest;
        
        /// <remarks/>
        public string terminal_orig;
        
        /// <remarks/>
        public string gate_orig;
        
        /// <remarks/>
        public string bag_claim;
        
        /// <remarks/>
        public int seats_cabin_first;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seats_cabin_firstSpecified;
        
        /// <remarks/>
        public int seats_cabin_business;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seats_cabin_businessSpecified;
        
        /// <remarks/>
        public int seats_cabin_coach;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seats_cabin_coachSpecified;
        
        /// <remarks/>
        public string inbound_faFlightID;
        
        /// <remarks/>
        public bool datalink;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool datalinkSpecified;
        
        /// <remarks/>
        public bool adhoc;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirportDisplayStruct {
        
        /// <remarks/>
        public string code;
        
        /// <remarks/>
        public string city;
        
        /// <remarks/>
        public string alternate_ident;
        
        /// <remarks/>
        public string airport_name;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class Timestamp {
        
        /// <remarks/>
        public int epoch;
        
        /// <remarks/>
        public string tz;
        
        /// <remarks/>
        public string dow;
        
        /// <remarks/>
        public string time;
        
        /// <remarks/>
        public string date;
        
        /// <remarks/>
        public int localtime;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool localtimeSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class CancellationRowStruct {
        
        /// <remarks/>
        public string ident;
        
        /// <remarks/>
        public string description;
        
        /// <remarks/>
        public int cancellations;
        
        /// <remarks/>
        public int delays;
        
        /// <remarks/>
        public int total;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class CancellationSummaryStruct {
        
        /// <remarks/>
        public int total_cancellations_worldwide;
        
        /// <remarks/>
        public int total_cancellations_national;
        
        /// <remarks/>
        public int total_delays_worldwide;
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        public string type_matching;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("matching")]
        public CancellationRowStruct[] matching;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class TrackFleetStruct {
        
        /// <remarks/>
        public int num_flights;
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("flights")]
        public FlightInfoStatusStruct[] flights;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class FleetBoardsStruct {
        
        /// <remarks/>
        public string fleet;
        
        /// <remarks/>
        public TrackFleetStruct arrivals;
        
        /// <remarks/>
        public TrackFleetStruct departures;
        
        /// <remarks/>
        public TrackFleetStruct enroute;
        
        /// <remarks/>
        public TrackFleetStruct scheduled;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class FindFlightMatch {
        
        /// <remarks/>
        public int num_segments;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("segments")]
        public FlightInfoStatusStruct[] segments;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class FindFlightStruct {
        
        /// <remarks/>
        public int num_flights;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("flights")]
        public FindFlightMatch[] flights;
        
        /// <remarks/>
        public int next_offset;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class FlightRouteStruct {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string type;
        
        /// <remarks/>
        public float latitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool latitudeSpecified;
        
        /// <remarks/>
        public float longitude;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool longitudeSpecified;
        
        /// <remarks/>
        public float distance_from_origin;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distance_from_originSpecified;
        
        /// <remarks/>
        public float distance_to_destination;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distance_to_destinationSpecified;
        
        /// <remarks/>
        public float distance_this_leg;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distance_this_legSpecified;
        
        /// <remarks/>
        public float outbound_course;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool outbound_courseSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ArrayOfFlightRouteStruct {
        
        /// <remarks/>
        public string route_distance;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("data")]
        public FlightRouteStruct[] data;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class CountAirlineOperationsStruct {
        
        /// <remarks/>
        public string icao;
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public int enroute;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class CountAirportOperationsStruct {
        
        /// <remarks/>
        public int enroute;
        
        /// <remarks/>
        public int departed;
        
        /// <remarks/>
        public int scheduled_departures;
        
        /// <remarks/>
        public int scheduled_arrivals;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirportDelayReason {
        
        /// <remarks/>
        public string reason;
        
        /// <remarks/>
        public string category;
        
        /// <remarks/>
        public int delay_secs;
        
        /// <remarks/>
        public string color;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirportDelayEntry {
        
        /// <remarks/>
        public string airport;
        
        /// <remarks/>
        public string color;
        
        /// <remarks/>
        public int delay_secs;
        
        /// <remarks/>
        public string category;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("reasons_all")]
        public AirportDelayReason[] reasons_all;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirportDelayStruct {
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("delays")]
        public AirportDelayEntry[] delays;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class TrackAirportStruct {
        
        /// <remarks/>
        public int num_flights;
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("flights")]
        public FlightInfoStatusStruct[] flights;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirportBoardsStruct {
        
        /// <remarks/>
        public string airport;
        
        /// <remarks/>
        public AirportStruct airport_info;
        
        /// <remarks/>
        public TrackAirportStruct arrivals;
        
        /// <remarks/>
        public TrackAirportStruct departures;
        
        /// <remarks/>
        public TrackAirportStruct enroute;
        
        /// <remarks/>
        public TrackAirportStruct scheduled;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirlineInfoStruct {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public string shortname;
        
        /// <remarks/>
        public string callsign;
        
        /// <remarks/>
        public string location;
        
        /// <remarks/>
        public string country;
        
        /// <remarks/>
        public string phone;
        
        /// <remarks/>
        public string url;
        
        /// <remarks/>
        public string wiki_url;
        
        /// <remarks/>
        public int airbourne;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool airbourneSpecified;
        
        /// <remarks/>
        public int flights_last_24_hours;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool flights_last_24_hoursSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class AirlineFlightScheduleStruct {
        
        /// <remarks/>
        public string ident;
        
        /// <remarks/>
        public string fa_ident;
        
        /// <remarks/>
        public string actual_ident;
        
        /// <remarks/>
        public int departuretime;
        
        /// <remarks/>
        public int arrivaltime;
        
        /// <remarks/>
        public string origin;
        
        /// <remarks/>
        public string destination;
        
        /// <remarks/>
        public string aircrafttype;
        
        /// <remarks/>
        public string meal_service;
        
        /// <remarks/>
        public int seats_cabin_first;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seats_cabin_firstSpecified;
        
        /// <remarks/>
        public int seats_cabin_business;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seats_cabin_businessSpecified;
        
        /// <remarks/>
        public int seats_cabin_coach;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool seats_cabin_coachSpecified;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://flightxml.flightaware.com/soap/FlightXML3")]
    public partial class ArrayOfAirlineFlightScheduleStruct {
        
        /// <remarks/>
        public int next_offset;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("flights")]
        public AirlineFlightScheduleStruct[] flights;
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void AircraftTypeCompletedEventHandler(object sender, AircraftTypeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AircraftTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AircraftTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public AircraftTypeStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AircraftTypeStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void AirlineFlightSchedulesCompletedEventHandler(object sender, AirlineFlightSchedulesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AirlineFlightSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AirlineFlightSchedulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ArrayOfAirlineFlightScheduleStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfAirlineFlightScheduleStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void AirlineInfoCompletedEventHandler(object sender, AirlineInfoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AirlineInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AirlineInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public AirlineInfoStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AirlineInfoStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void AirportBoardsCompletedEventHandler(object sender, AirportBoardsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AirportBoardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AirportBoardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public AirportBoardsStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AirportBoardsStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void AirportDelaysCompletedEventHandler(object sender, AirportDelaysCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AirportDelaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AirportDelaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public AirportDelayStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AirportDelayStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void AirportInfoCompletedEventHandler(object sender, AirportInfoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AirportInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AirportInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public AirportStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AirportStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void BlockIdentCheckCompletedEventHandler(object sender, BlockIdentCheckCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BlockIdentCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BlockIdentCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void CountAirportOperationsCompletedEventHandler(object sender, CountAirportOperationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountAirportOperationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountAirportOperationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public CountAirportOperationsStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountAirportOperationsStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void CountAllEnrouteAirlineOperationsCompletedEventHandler(object sender, CountAllEnrouteAirlineOperationsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountAllEnrouteAirlineOperationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountAllEnrouteAirlineOperationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public CountAirlineOperationsStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountAirlineOperationsStruct[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void DecodeFlightRouteCompletedEventHandler(object sender, DecodeFlightRouteCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecodeFlightRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecodeFlightRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ArrayOfFlightRouteStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfFlightRouteStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void DecodeRouteCompletedEventHandler(object sender, DecodeRouteCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecodeRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecodeRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ArrayOfFlightRouteStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfFlightRouteStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void FindFlightCompletedEventHandler(object sender, FindFlightCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindFlightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindFlightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public FindFlightStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindFlightStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void FleetBoardsCompletedEventHandler(object sender, FleetBoardsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FleetBoardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FleetBoardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public FleetBoardsStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FleetBoardsStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void FlightCancellationStatisticsCompletedEventHandler(object sender, FlightCancellationStatisticsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlightCancellationStatisticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FlightCancellationStatisticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public CancellationSummaryStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CancellationSummaryStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void FlightInfoStatusCompletedEventHandler(object sender, FlightInfoStatusCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FlightInfoStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FlightInfoStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ArrayOfFlightInfoStatusStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfFlightInfoStatusStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void GetFlightTrackCompletedEventHandler(object sender, GetFlightTrackCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlightTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlightTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public TrackStruct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrackStruct[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void LatLongsToDistanceCompletedEventHandler(object sender, LatLongsToDistanceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLongsToDistanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLongsToDistanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void LatLongsToHeadingCompletedEventHandler(object sender, LatLongsToHeadingCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LatLongsToHeadingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LatLongsToHeadingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void NearbyAirportsCompletedEventHandler(object sender, NearbyAirportsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NearbyAirportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NearbyAirportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public NearbyAirportsStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NearbyAirportsStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void RoutesBetweenAirportsCompletedEventHandler(object sender, RoutesBetweenAirportsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RoutesBetweenAirportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RoutesBetweenAirportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ArrayOfRoutesBetweenAirportsStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ArrayOfRoutesBetweenAirportsStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void TailOwnerCompletedEventHandler(object sender, TailOwnerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TailOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TailOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public TailOwnerStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TailOwnerStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void WeatherConditionsCompletedEventHandler(object sender, WeatherConditionsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WeatherConditionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WeatherConditionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public WeatherConditionsArrayStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherConditionsArrayStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void WeatherForecastCompletedEventHandler(object sender, WeatherForecastCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WeatherForecastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WeatherForecastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public WeatherForecastStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherForecastStruct)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    public delegate void ZipcodeInfoCompletedEventHandler(object sender, ZipcodeInfoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.7.1.15")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZipcodeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZipcodeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public ZipcodeInfoStruct Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ZipcodeInfoStruct)(this.results[0]));
            }
        }
    }
}
